// This file is part of the OWASP O2 Platform (http://www.owasp.org/index.php/OWASP_O2_Platform) and is released under the Apache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0)
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Drawing;
using O2.Kernel;
using O2.Kernel.ExtensionMethods;
using O2.Interfaces.O2Core;
using O2.DotNetWrappers.DotNet;
using O2.DotNetWrappers.Windows;
using O2.DotNetWrappers.ExtensionMethods;
using O2.Views.ASCX;
using O2.Views.ASCX.classes;
using O2.Views.ASCX.classes.MainGUI;
using O2.Views.ASCX.CoreControls;

using O2.External.IE;
using O2.External.IE.Wrapper;
using O2.External.IE.Interfaces;
using O2.External.IE.ExtensionMethods;

using O2.External.SharpDevelop.Ascx;
using O2.External.SharpDevelop.ExtensionMethods;
//O2Ref:C:\Program Files\Microsoft.NET\Primary Interop Assemblies\Microsoft.mshtml.dll
using mshtml;

//O2File:C:\O2\_O2 - LOCAL SVN - DEV\O2 - All Active Projects\O2Core\O2_DotNetWrappers\Windows\Screenshots.cs

using System.Threading;

namespace O2.Script
{
    public class ascx_Html_Editor: UserControl
    {    
    	private static IO2Log log = PublicDI.log;
    	public ascx_Directory directory;
		public IO2Browser browser;
		public ascx_SourceCodeViewer htmlCode;
		public PictureBox pictureBox;
		public string currentFile = "";
		
		public string startDir = Path.Combine(PublicDI.config.O2TempDir,"_HtmlPages");

        public static void startControl()
    	{       		
    		typeof(ascx_Html_Editor).showInForm("Html Editor", 700,500);
    	}    	
    	
    	public ascx_Html_Editor()
    	{    		    	
    		Thread.CurrentThread.SetApartmentState( ApartmentState.STA);
    		buildGui();	            
    		
    		htmlCode.MouseDown += new MouseEventHandler( MyMouseDown );
			htmlCode.MouseUp += new MouseEventHandler( MyMouseUp );
			htmlCode.MouseMove += new MouseEventHandler( MyMouseMove );
			bHaveMouse = false;		

    		browser.open("http://www.google.com");
        }
    
        private void buildGui()
        {
        	var groupBoxes = this.add_SplitContainer_2x2("Directory","WebEditor","Config","HtmlCode",true, 100,40,40);
        	directory = groupBoxes[0].add_Directory(startDir);        	
        	browser = groupBoxes[1].add_WebBrowserWithLocationBar();
        	htmlCode = groupBoxes[3].add_SourceCodeViewer();
        	htmlCode.astDetails(false);
        	
        	// build config
        	groupBoxes[2].add_Link("toggle edit mode", 20 ,10,()=> setEditMode(!getEditMode()) );
        	groupBoxes[2].add_Link("refresh", 40 ,10,()=> updateHtmlPage() );
        	groupBoxes[2].add_Link("take screenshot", 60 ,10,()=> takeScreenShot() );
        	
        	pictureBox = groupBoxes[2].add_PictureBox(70,10);        	
        	pictureBox.anchor_All();
        	takeScreenShot();
        	// setup controls events
        	directory._onDirectoryDoubleClick+=selectedFileOrFolder;       	
        	browser.onDocumentCompleted +=onDocumentCompleted;
        	//htmlCode.eDocumentDataChanged += htmlTextChanged;
        	// fine tune loaded controls behaviour
        	directory._WatchFolder = true;
        	directory.AllowDrop = false;
        	htmlCode.editor().colorCodeForExtension(".html");
        	
        	// remove on next code Sync
        	((O2BrowserIE)browser).AllowWebBrowserDrop  = false;	
        	        	
     	}   
    	    	  
		public Image takeScreenShot()
		{
			var image = Screenshots.getScreenshotOfDesktop();
			//var image = Screenshots.getScreenshotOfFormObjectAndItsControls(this);			
			this.info("image:{0}", image.typeName());
			
        	pictureBox.BackgroundImage = image;
			return image;
		}
    	    	  
		public void onBrowserLocationChanged(IO2Browser _browser, string file)
		{
			log.info("file: {0}", file);
			loadFile(file);
		}
		
		public void loadFile(string fileToLoad)
		{
			log.info("fileToLoad: {0}", fileToLoad);
			if (fileToLoad.empty())
				return;
			var file = Path.Combine(directory.getCurrentDirectory(), fileToLoad);
			log.info("file: {0}", file);
			if (! file.extension(".html"))
				file+=".html";
			if (! file.exists())
			{
				log.info("Creating file: {0}", file);
				file.create("<html><body>web content</body></html>");
			}
			selectedFileOrFolder(file);
		}
		
		public void selectedFileOrFolder(string fileOrFolder)
		{
			if (fileOrFolder.dirExists())			// if it is a directory return
				return;			
			currentFile  = fileOrFolder;
			
			browser.open(fileOrFolder);
		}
		
		public void onDocumentCompleted(IO2HtmlPage htmlPage)
		{
			this.info("---- onDocumentCompleted");
			var o2BrowserIE = (O2BrowserIE)browser;
			
			//this.info("---- Text: {0}" , o2BrowserIE.Text());
			setEditMode(true);
		}
		
		public bool getEditMode()
		{
			return browser.HtmlEditMode;
		}
		
		public void setEditMode(bool value)
		{		
			var o2BrowserIE = (O2BrowserIE)browser;
			o2BrowserIE.HtmlEditMode = value;
			if (value)						
				o2BrowserIE.onEditedHtmlChange(updateHtmlPage);				
				
			updateHtmlPage();			
		}
		
		public void updateHtmlPage()
		{
			var o2BrowserIE = (O2BrowserIE)browser;
			updateHtmlPage(o2BrowserIE.Html());		
		}
		public void updateHtmlPage(string html)
		{
			//var pageHtml = ((O2BrowserIE)browser).DocumentText;
			//htmlCode.Parent.BackColor = System.Drawing.Color.White;
			var value = htmlCode.textEditorControl().ActiveTextAreaControl.VScrollBar.Value;
			//log.info("before: {0}", value);
			//var fileType = (currentFile.extension(".html")) ? currentFile : "AAA.html";
			//htmlCode.Visible = false;
			//htmlCode.setDocumentContents(html, fileType);
			htmlCode.textEditorControl().Document.TextContent = html;
			//log.info("after: {0}", value);
			htmlCode.textEditorControl().ActiveTextAreaControl.VScrollBar.Value = value;
			//htmlCode.Visible = true;
		/*
			var doc = (IHTMLDocument3) ((O2BrowserIE)browser).Document.DomDocument;
			if (doc == null)
				log.error("doc was null!!");
			else
			{
	            var pageHtml = doc.documentElement.outerHTML;
	            
				htmlCode.setDocumentContents(pageHtml, currentFile);
			}*/
		}
		
		/*public void htmlTextChanged(string newText)
		{
			var currentHtmlCode = ((O2BrowserIE)browser).DocumentText;
			if (currentHtmlCode != newText)
			{
				//browser.HtmlEditMode = false;
				((O2BrowserIE)browser).DocumentText = newText;
				//browser.HtmlEditMode = true;
			}
		}*/
		
		
		
		// test to see if we can use this to draw a rectangule
		
		Boolean bHaveMouse;
		Point	ptOriginal = new Point();
		Point	ptLast = new Point();
		
		// Called when the left mouse button is pressed. 
		public void MyMouseDown( Object sender, MouseEventArgs e )
		{
			// Make a note that we "have the mouse".
			bHaveMouse = true;
			// Store the "starting point" for this rubber-band rectangle.
			ptOriginal.X = e.X;
			ptOriginal.Y = e.Y;
			// Special value lets us know that no previous
			// rectangle needs to be erased.
			ptLast.X = -1;
			ptLast.Y = -1;
		}
		// Convert and normalize the points and draw the reversible frame.
		private void MyDrawReversibleRectangle( Point p1, Point p2 )
		{
			Rectangle rc = new Rectangle();
		
			// Convert the points to screen coordinates.
			p1 = PointToScreen( p1 );
			p2 = PointToScreen( p2 );
			// Normalize the rectangle.
			if( p1.X < p2.X )
			{
				rc.X = p1.X;
				rc.Width = p2.X - p1.X;
			}
			else
			{
				rc.X = p2.X;
				rc.Width = p1.X - p2.X;
			}
			if( p1.Y < p2.Y )
			{
				rc.Y = p1.Y;
				rc.Height = p2.Y - p1.Y;
			}
			else
			{
				rc.Y = p2.Y;
				rc.Height = p1.Y - p2.Y;
			}
			// Draw the reversible frame.
			ControlPaint.DrawReversibleFrame( rc, 
							Color.Red, FrameStyle.Dashed );
		}
		// Called when the left mouse button is released.
		public void MyMouseUp( Object sender, MouseEventArgs e )
		{
			// Set internal flag to know we no longer "have the mouse".
			bHaveMouse = false;
			// If we have drawn previously, draw again in that spot
			// to remove the lines.
			if( ptLast.X != -1 )
			{
				Point ptCurrent = new Point( e.X, e.Y );
				MyDrawReversibleRectangle( ptOriginal, ptLast );
			}
			// Set flags to know that there is no "previous" line to reverse.
			ptLast.X = -1;
			ptLast.Y = -1;
			ptOriginal.X = -1;
			ptOriginal.Y = -1;
		}
		// Called when the mouse is moved.
		public void MyMouseMove( Object sender, MouseEventArgs e )
		{
			Point ptCurrent = new Point( e.X, e.Y );
			// If we "have the mouse", then we draw our lines.
			if( bHaveMouse )
			{
				// If we have drawn previously, draw again in
				// that spot to remove the lines.
				if( ptLast.X != -1 )
				{
					MyDrawReversibleRectangle( ptOriginal, ptLast );
				}
				// Update last point.
				ptLast = ptCurrent;
				// Draw new lines.
				MyDrawReversibleRectangle( ptOriginal, ptCurrent );
			}
		}
    }        
}
