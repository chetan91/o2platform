using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using O2.Cmd.SpringMvc.Objects;
using O2.DotNetWrappers.DotNet;
using O2.DotNetWrappers.Windows;

namespace O2.Cmd.SpringMvc.Ascx
{
    partial class ascx_ExploitSpringMvc
    {
        private bool runOnLoad = true;
        public string urlOfWebApplicationRoot = "";
        //public bool executeOpenRequests = false;   // so that we don't get one when 

        public void onLoad()
        {
            if (!DesignMode && runOnLoad)
            {                
                //springMvcMappings._onTreeViewSelect += tvControllers_AfterSelect;
                runOnLoad = false;
//                btLoadTestData_Click(null,null);
                O2Forms.addToDataGridView_Column(dataGridViewWithParameters, "name",200);
                O2Forms.addToDataGridView_Column(dataGridViewWithParameters, "value", -1);
                springMvcAutoBindClassesView.onMapClassComplete += loadAutoBindedDataIntoListBox;
            }            
        }

        public void openInWebBrowser(string urlToOpen)
        {
            webBrowser.Navigate(urlToOpen);
        }

        public void onSpringMvcMappingsTreeViewSelect(TreeView treeView, bool openPageWhenControllerIsSelected)
        {
            treeView.invokeOnThread(
                () =>
                    {
                        if (treeView.SelectedNode != null && treeView.SelectedNode.Tag != null)
                        {
                            if (treeView.SelectedNode.Tag is SpringMvcController)
                                showDetailsForSpringMvcController((SpringMvcController)treeView.SelectedNode.Tag, openPageWhenControllerIsSelected);
                        }
                    });
        }

        private void showDetailsForSpringMvcController(SpringMvcController springMvcController, bool openPageWhenControllerIsSelected)
        {
            if (springMvcController != null)
            {
                if (openPageWhenControllerIsSelected)
                {
                    dataGridViewWithParameters.Rows.Clear();
                    tbUrlToSubmit.Text = string.Format("{0}{1}", urlOfWebApplicationRoot,
                                                       springMvcController.HttpRequestUrl);
                    cbSubmitMethod.Text = springMvcController.HttpRequestMethod;
                    foreach (var autoWiredObject in springMvcController.AutoWiredJavaObjects)
                    {
                        if (autoWiredObject.name != null)
                            addVariableToParametersDataGridView(autoWiredObject.name);
                    }
                }

                springMvcAutoBindClassesView.clearLoadedData();
                springMvcAutoBindClassesView.setHideOrShowGetAndSetStrings(true);                
                foreach(var autoWiredJavaObject in springMvcController.AutoWiredJavaObjects)
                {
                    if (autoWiredJavaObject.className != null)
                        if (springMvcMappings.cirData.dClasses_bySignature.ContainsKey(autoWiredJavaObject.className))
                            springMvcAutoBindClassesView.mapClass(springMvcMappings.cirData.dClasses_bySignature[autoWiredJavaObject.className], springMvcMappings.cirData, false);
                }                
                if (springMvcController.HttpMappingParameter != null && springMvcController.HttpMappingParameter != "") 
                    dataGridViewWithParameters.Rows.Add(new object[] { springMvcController.HttpMappingParameter,"SPRING MVC method mapping" }); ;

                if (openPageWhenControllerIsSelected)
                    calculateRequestDataAndsendRequest();                
            }

        }

        public void addVariableToParametersDataGridView(string name)
        {
            addVariableToParametersDataGridView(name, null);
        }

        public void addVariableToParametersDataGridView(string name, string value)
        {
            dataGridViewWithParameters.Rows.Add(new object[] { name, value }); ;
        }

        private void loadAutoBindedDataIntoListBox()
        {
            var resolvedMappings = springMvcAutoBindClassesView.getResolvedListOfVariablesInvokable();
            lbAutoBindedData.invokeOnThread(
                () =>
                    {
                        lbAutoBindedData.Items.Clear();
                        foreach (var item in resolvedMappings)
                            lbAutoBindedData.Items.Add(item);
                    });
        }

        private void calculateRequestDataAndsendRequest()
        {
            var parameters = new Dictionary<string, string>();
            foreach (DataGridViewRow row in dataGridViewWithParameters.Rows)
            {
                if (row.Cells.Count == 2)
                    if (row.Cells[0].Value != null && row.Cells[1].Value != null)
                    {
                        var name = row.Cells[0].Value.ToString();
                        var value = row.Cells[1].Value.ToString();
                        if (parameters.ContainsKey(name))
                            DI.log.error("calculateRequestDataAndsendRequest, there was already a form variable called:{0}", name);
                        else
                            parameters.Add(name, value);
                    }
            }
            sendRequest(cbSubmitMethod.Text, tbUrlToSubmit.Text, parameters);
        }

        private void sendRequest(string submitVerb, string url, Dictionary<string, string> parameters)
        {
            switch(submitVerb)
            {
                case "GET":
                    sendRequest_GET(url, parameters);
                    break;
                case "POST":
                    sendRequest_POST(url, parameters);
                    break;
                default:
                    DI.log.error("Could not submit request for VERB {0}, only POST and GET are supported in this version");
                    break;
            }
        }

        private void sendRequest_GET(string url, Dictionary<string, string> parameters)
        {
            var parametersText = "";
            if (parameters != null)
            {
                foreach (var parameter in parameters.Keys)                
                    parametersText += string.Format("{0}={1}&", parameter, parameters[parameter]);                
            }
            var fullUrl = (parametersText == "") ? url : string.Format("{0}?{1}", url, parametersText);
            DI.log.info("Sending GET request to {0} with {1} parameters", fullUrl, (parameters == null) ? 0 : parameters.Keys.Count);
            webBrowser.Navigate(fullUrl);
        }

        private void sendRequest_POST(string url, Dictionary<string, string> parameters)
        {
            var parametersText = "";
            if (parameters != null)
            {
                foreach (var parameter in parameters.Keys)
                    parametersText += string.Format("{0}={1}&", parameter, parameters[parameter]);
            }
            byte[] postData = Encoding.ASCII.GetBytes(parametersText);
            string targetFrame = "";
            string additionalHeaders = "Content-Type: application/x-www-form-urlencoded";
            webBrowser.Navigate(url, targetFrame, postData, additionalHeaders);
        }

        public void onWebBrowserDocumentCompleted(Uri uri)
        {
            dataGridViewWithParameters.invokeOnThread(
                () =>
                    {
                        if (cbLoadParametersOnPageLoad.Checked)
                        {
                            dataGridViewWithParameters.Rows.Clear();
                            DI.log.info("WebBrowser DocumentCompleted event for: {0}", uri);
                            if (webBrowser.Document != null)
                                foreach (HtmlElement form in webBrowser.Document.Forms)
                                {
                                    foreach (HtmlElement element in form.All)
                                    {
                                        if (element.Name != "" && element.TagName == "INPUT")
                                        {
                                            var parameterName = element.Name;
                                            var parameterValue = element.GetAttribute("value");
                                            addVariableToParametersDataGridView(parameterName, parameterValue);
                                            cbSubmitMethod.Text = "POST";
                                        }
                                    }
                                }
                            tbUrlToSubmit.Text = uri.ToString();
                            openControllerThatMatchesUri(uri, dataGridViewWithParameters.Rows.Count > 0);
                        }
                        
                    });
            //foreach(var variable in form.)
        }
       
        public void openControllerThatMatchesUri(Uri uri, bool onlyMapToPOST)
        {
            springMvcMappings.selectControllerThatMatchesUri(uri, urlOfWebApplicationRoot, onlyMapToPOST);
        }


        public void handleDataGridViewDrop(DragEventArgs e)
        {
            var variableName = (string)Dnd.tryToGetObjectFromDroppedObject(e, typeof(string));
            if (variableName != null)
                addVariableToParametersDataGridView(variableName);
        }   
    }
}
