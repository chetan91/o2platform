using System;
using System.Windows.Forms;
using System.Collections.Generic;
using O2.DotNetWrappers.O2Findings;
using O2.External.WinFormsUI.Forms;
using O2.Kernel;
using O2.Kernel.CodeUtils;
using O2.Kernel.Interfaces.O2Findings;
using O2.Kernel.Interfaces.Views;
using O2.Views.ASCX.O2Findings;

namespace O2.Tool.OzasmtQuery._ScriptSamples
{
    public class C_UniqueFindingPerVulnerabilityTypePerFilePerLineOfCode
    {
        private static readonly IO2AssessmentSave o2AssessmentSave = new O2AssessmentSave_OunceV6();

        private const string ozasmtFileToUse = @"E:\O2\Demodata\WebGoat 6.0_Scan_CurrentRules.ozasmt";
            
        private const string findingsViewerControlName_Source = "Findings Viewer Source Data";
        private const string findingsViewerControlName_Result = "Findings Viewer Analysis Result";

        public static void loadOzasmtFileIntoSourceFindingsViewer()
        {
            // open the source Findings Viewer
            O2AscxGUI.openAscxAsForm(typeof(ascx_FindingsViewer), findingsViewerControlName_Source);	             
            // load assessment file into Source Findings Viewer
            findingsViewerControlName_Source.invokeOnAscx("loadO2Assessment", new object[] { ozasmtFileToUse });
                    
            //MessageBox.Show("Ozasmt File loaded in Findings Viewer Control: " + ozasmtFileToUse);            
        }
                
        public static List<IO2Finding> getFindingsFromSourceFidingsViewer()
        {
            var o2Findings = (List<IO2Finding>)findingsViewerControlName_Source.invokeOnAscx("getFindingsFromTreeView");
            if (o2Findings!= null) MessageBox.Show(string.Format("Retrieved {0}  findings from Findings Viewer",o2Findings.Count));
            return o2Findings;
        }

        public static void filter_ViewAndSaveSmartTraces()
        {
            var o2Findings = getFindingsFromSourceFidingsViewer();
            var smartTraces = new List<IO2Finding>();
            foreach(var o2Finding in o2Findings)
                if (o2Finding.o2Traces.Count >0)
                    smartTraces.Add(o2Finding);  
            MessageBox.Show(string.Format("There are {0} findings with Smart traces",smartTraces.Count));
            loadO2FindingsIntoResultFindingsViewer(smartTraces);
        }
        
        public static void filter_UniqueFindingPerVulnerabilityTypePerFilePerLineOfCode()
        {
            var o2Findings = getFindingsFromSourceFidingsViewer();
            var smartTracesCreate = new List<IO2Finding>();
            var uniqueVulnerabilities = new Dictionary<String,List<IO2Finding>>();
            foreach(var o2Finding in o2Findings)
                if (o2Finding.o2Traces.Count >0)
                {
                    if (false == uniqueVulnerabilities.ContainsKey(o2Finding.vulnType))
                        uniqueVulnerabilities.Add(o2Finding.vulnType, new List<IO2Finding>());
                    uniqueVulnerabilities[o2Finding.vulnType].Add(o2Finding);        			
                }
        		
        		
            /*foreach (var type in uniqueVulnerabilities.Keys)
        		PublicDI.log.info("vuln name: {0} with {1} entries", type, uniqueVulnerabilities[type].Count);        		
			return; */
			
            var uniqueFileNameAndLines = new Dictionary<String, List<IO2Finding>>();
            foreach (var type in uniqueVulnerabilities.Keys)
            {                
                foreach (var o2Finding in uniqueVulnerabilities[type])
                {
                    var uniquename = string.Format("{0}_{1}", o2Finding.file, o2Finding.lineNumber);
                    if (false == uniqueFileNameAndLines.ContainsKey(uniquename))
                        uniqueFileNameAndLines.Add(uniquename,new List<IO2Finding>());
                    uniqueFileNameAndLines[uniquename].Add(o2Finding);

                }
                PublicDI.log.info("vuln name: {0} with {1} entries", type, uniqueVulnerabilities[type].Count);
                
                //   foreach (var uniqueName in uniqueFileNameAndLines.Keys)
                //       PublicDI.log.info("     - {0}  (with {1} findings)", uniqueName, uniqueFileNameAndLines[uniqueName].Count);
                
            }

            // create a new Assessment file with 1 example each
            foreach (var uniqueName in uniqueFileNameAndLines.Keys)
            {
                var o2SampleO2Finding =  uniqueFileNameAndLines[uniqueName][0];
                o2SampleO2Finding.context = String.Format("There were {0} similar traces that ended up in this file+line combination", uniqueFileNameAndLines[uniqueName].Count);                
                smartTracesCreate.Add(o2SampleO2Finding);
            }

            var savedFile = PublicDI.config.TempFileNameInTempDirectory + "livedemo_UniqueFindingPerVulnerabilityTypePerFilePerLineOfCode.ozasmt";
            var o2Assessment = new O2Assessment { o2Findings = smartTracesCreate };
            o2Assessment.save(o2AssessmentSave, savedFile);
            // StringsAndLists.showListContents(uniqueVulnerabilities);

            //loadO2FindingsIntoResultFindingsViewer(smartTraces);		
        }


        public static void loadO2FindingsIntoResultFindingsViewer(List<IO2Finding> o2FindingsToLoad)
        {
            O2AscxGUI.openAscxAsForm(typeof(ascx_FindingsViewer), findingsViewerControlName_Result);
            findingsViewerControlName_Result.invokeOnAscx("loadO2Findings", new object[] { o2FindingsToLoad });
            // MessageBox.Show("Ozasmt File loaded into Results Findings Viewer Control");            
        }
        
        
        public static void saveO2FindingsInResultsFindingViewer()
        {
            var o2FindingsInResultViewer = (List<IO2Finding>)findingsViewerControlName_Result.invokeOnAscx("getFindingsFromTreeView");
            var o2Assessment = new O2Assessment { o2Findings = o2FindingsInResultViewer };
            var fileNameToSaveResults = PublicDI.config.TempFileNameInTempDirectory + "_CustomOzasmtFile.ozasmt";
            o2Assessment.save(o2AssessmentSave, fileNameToSaveResults);
            MessageBox.Show(string.Format("Findings in result Viewer saved to {0}",fileNameToSaveResults));
        }
        
        
        // ensure that the logviewer is visible
        static public void showLogViewerControl()
        {
            O2Messages.setAscxDockStateAndOpenIfNotAvailable("ascx_LogViewer",O2DockState.DockBottom,"O2 Logs");
        }
    }
}