// This file is part of the OWASP O2 Platform (http://www.owasp.org/index.php/OWASP_O2_Platform) and is released under the Apache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using O2.Kernel;
using O2.Kernel.ExtensionMethods;
using O2.Kernel.Interfaces.O2Core;
using O2.DotNetWrappers.DotNet;
using O2.DotNetWrappers.ExtensionMethods;
using O2.DotNetWrappers.Windows;
using O2.Views.ASCX.classes.MainGUI;
using O2.Views.ASCX.classes;

//O2Ref:System.ServiceProcess.dll
using System.ServiceProcess;

namespace O2.Script
{
    public class ascx_Services_Stop: UserControl
    {    
    	private static IO2Log log = PublicDI.log;
		public DataGridView dataGridView;
        public static void startControl()
    	{   
    		WinForms.showAscxInForm(
				typeof(ascx_Services_Stop), 
				"Stop Running Services", 
				400, 
				400);		    		
    	}    	
    	
    	public ascx_Services_Stop()
    	{    		    	
    		buildGui();	            
        }
    
        private void buildGui()
        {        	 
        	 loadServicesData();        	         	 
     	}   

		public void loadServicesData()
		{
			this.invokeOnThread(
				()=> {
						 this.clear();
						 dataGridView = this.add_DataGridView();  
						 dataGridView.CellContentClick+= (sender,e) => 	cellClicked(e.RowIndex,e.ColumnIndex);
						 dataGridView.Columns.Clear();						 			        	 
						 
			        	 ServiceController[] services = ServiceController.GetServices();
			        	 
			        	 // use this to see all available properties
			        	 /*foreach(var property in services[0].type().properties())
			        	 		dataGridView.column(property.Name,150);
			        	 foreach(var service in services)      	 
			        	 {  
			        	 	var rowCells = new List<object>();
			    	 		foreach(var property in service.type().properties())
			    	 			rowCells.Add(service.prop(property.Name));
			    	 		dataGridView.row(rowCells.ToArray());        	 		
			        	 }*/
			        	 dataGridView.add_Column("Display Name");
			        	 dataGridView.add_Column("Service Name");
			        	 dataGridView.add_Column("Service Type");			        	 
			        	 dataGridView.add_Column_Link("stop service");        	
			        	 foreach(var service in services)      	 
			        	 {        	 
			        	 	if (service.CanStop)			        	 	
			        	 	{
			        	 		var id = dataGridView.add_Row(
			        	 					 service.DisplayName,
			        	 					 service.ServiceName,			        	 					 
			        	 					 service.ServiceType,
			        	 					 "stop");
			        	 		dataGridView.Rows[id].Tag = service;
			        	 	}	    	 		
			        	 }        	 
			        });
		}
		
     	public void cellClicked(int rowId,int columnId)
     	{
     		var cell = dataGridView.value(rowId,columnId).ToString();
     		//this.info(cell);     		
     		if (cell.eq("stop"))
     		{
     			dataGridView.set(rowId,columnId,"stopping");
     			O2Thread.mtaThread(
	     			()=>{	     		
							var row = dataGridView.get_Row(rowId); 					
				     		var service = (ServiceController)row.Tag;//dataGridView.Rows[row].Tag;
				     		this.info("Stopping service: {0}", service.ServiceName);				     		
				     		service.Stop();
				     		service.WaitForStatus(ServiceControllerStatus.Stopped);
				     		service.Refresh();
				     		this.info("Service status: {0}", service.Status);
				     		if (service.Status == ServiceControllerStatus.Stopped)
				     			dataGridView.remove_Row(row);				     		
				     	});
			};
     	}
    	    	    	    	    
   }         
}
